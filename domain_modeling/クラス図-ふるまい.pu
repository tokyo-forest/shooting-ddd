@startuml 
title playing game

package domain <<Frame>> {

    package エンティティ <<Frame>> {
        abstract class "エンティティ" as Entity implements PositionIF {
            position: Position
            velocity: Velocity
            radius: int
        }

        interface "座標IF" as PositionIF{
            +getPosition():Position;

        }
    }

    package 値オブジェクト <<Frame>> {
        class "座標" as Position {
            x: int
            y: int
        }

        class "速度" as Velocity {
            vx: int
            vy: int
        }

        class "壁" as Wall {
            position1: Position
            position2: Position

            +isIn(Position): boolean
        }

        class "ダメージ値" as Damage {
            damage: int
        }
    }

    Wall *-- Position

    Entity *-- Position
    Entity *-- Velocity

    package 機体 <<Frame>> {
        abstract class "機体" as Aircraft extends Entity {
            hit()
        }

        class "自機" as MyAircraft extends Aircraft {
            remain: int
            result: Result
            factory: BulletFactoryInterface

            +hit()
            +isGameover()
            +fire()
        }
        class "敵機" as EnemyAircraft extends Aircraft {
            hp: int
            point: int
            factory: BulletFactoryInterface

            +hit()
            +vanish()
            +fire()
        }
    }

    interface "弾ファクトリーIF" as BulletFactoryInterface {
        +createBullet()
    }

    MyAircraft *-- BulletFactoryInterface
    EnemyAircraft *-- BulletFactoryInterface

    package 弾 <<Frame>> {
        abstract class "弾" as Bullet extends Entity{
            attack: ダメージ値

            vanish()
        }

        class "自機弾" as MyBullet extends Bullet {
            +vanish()
        }

        class "敵機弾" as EnemyBullet extends Bullet {
            +vanish()
        }
    }
    class "結果" as Result {
        score: int
        playerName: String
    }

    MyAircraft *-- Result

    package 行動パターン <<Frame>> {
        interface 行動パターン extends PositionIF{
            行動ロジック: 行動ロジック
            +次の行動()
        }

        abstract class "行動ロジック" as actionLogic {
            +次の行動()
        }

        class "直進" as straight extends actionLogic{
        }

        class "曲がって進む" as turn extends actionLogic{
        }

        行動パターン --* actionLogic
        Entity ..|> 行動パターン
    }

    package 衝突判定 <<Frame>> {
        interface 衝突 {
            +衝突時の振る舞い(): 衝突時の振る舞い
        }

        abstract 衝突判定 {
            Objリスト: List<衝突オブジェクト>
            判定する()
        }

        class オブジェクト間判定 extends 衝突判定{
        }

        class 壁判定 extends 衝突判定{
        }

        衝突判定 --> 衝突オブジェクト
        Entity ..|> 衝突オブジェクト

    }

    package ダメージ判定 <<Frame>> {
        interface ダメージ判定処理 {
            ダメージを受ける(ダメージ値)void;
        }

        Entity ..|> ダメージ判定処理
    }

}

package factory <<Frame>> {
    Class "自機弾ファクトリー" as MyBulletFactory implements BulletFactoryInterface{
        +MyBullet createBullet()
        +void registerBullet()
    }
    Class "敵機弾ファクトリー" as EnemyBulletFactory implements BulletFactoryInterface{
        +EnemyBullet createBullet()
        +void registerBullet()
    }

    MyBulletFactory --> MyBullet : Creates
    EnemyBulletFactory --> EnemyBullet : Creates
}

package controller <<Frame>> {
    class "ゲーム管理" as Administrator {
        myAircraft: MyAircraft
        inputManager: InputManger
        enemyAircrafts: List<EnemyAircraft>
        myBullets: List<MyBullet>
        enemyBullets: List<EnemyBullet>

        move()
    }

    interface "インプットマネージャー" as InputManager {
        +left()
        +right()
        +up()
        +down()
    }

    Administrator *-- InputManager

    package view <<Frame>> {
        Class "エンティティビュー" as EntityView {
            sprite: Sprite
        }

        Class "Pixiアダプター" as PixiAdapter {
        }

    }

    factory --> EntityView : Creates

    Administrator --> PixiAdapter : Use
}

package infra <<Frame>> {
    Class KeyboardManager implements InputManager {
        +left()
        +right()
        +up()
        +down()
    }

    Class Keyboard {

    }

    KeyboardManager *-- Keyboard
}

Administrator *-- domain

@enduml